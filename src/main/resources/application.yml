spring:
  application:
    name: nivio
  main:
    lazy-initialization: true
  security:
    oauth2:
      client:
        registration:
          github:
            clientId: ${NIVIO_AUTH_GITHUB_CLIENT_ID:_}
            clientSecret: ${NIVIO_AUTH_GITHUB_CLIENT_SECRET:_}

  mail:
    host: ${NIVIO_MAIL_HOST:}
    port: ${NIVIO_MAIL_PORT:587}
    username: ${NIVIO_MAIL_USERNAME:}
    password: ${NIVIO_MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls.enable: true

  mustache:
    check-template-location: false

logging:
  level:
    de:
      bonndan:
        nivio:
          output: INFO

server:
  port: ${PORT:8080}

management:
  server:
    port: 8090

  endpoint:
    health:
      show-details: always

  health:
    mail:
      enabled: false

nivio:
  baseUrl: ${NIVIO_BASE_URL:}
  version: ^project.version^-^git.commit.id.abbrev^
  pollingMilliseconds: 30000 # 30 secs
  iconFolder: ${NIVIO_ICON_FOLDER:}
  brandingForeground: ${NIVIO_BRANDING_FOREGROUND:7022F2}
  brandingBackground: ${NIVIO_BRANDING_BACKGROUND:161618}
  brandingSecondary: ${NIVIO_BRANDING_SECONDARY:22F2C2}
  brandingLogoUrl: ${NIVIO_BRANDING_LOGO_URL:}
  brandingMessage: ${NIVIO_BRANDING_MESSAGE:All Landscapes}
  seed: ${SEED:}
  demo: ${DEMO:}

auth:
  loginMode: ${NIVIO_AUTH_LOGIN_MODE:none}
  allowedOriginPatterns: ${NIVIO_AUTH_ALLOWED_ORIGINS:}
  githubNameAttribute: ${NIVIO_AUTH_GITHUB_NAME_ATTRIBUTE:name}
  githubAliasAttribute: ${NIVIO_AUTH_GITHUB_ALIAS_ATTRIBUTE:login}

observerconfig:
  scanDelay:
    KubernetesObserver: 1


gitlab: # add new environment variables
  hostUrl: ${GITLAB_HOST_URL:}
  personalAccessToken: ${GITLAB_PERSONAL_ACCESS_TOKEN:}
  username: ${GITLAB_USERNAME:}
  password: ${GITLAB_PASSWORD:}


github: # add new environment variables
  login: ${GITHUB_LOGIN:}
  password: ${GITHUB_PASSWORD:}
  oauth: ${GITHUB_OAUTH:}
  jwt: ${GITHUB_JWT:}

sonar: # add new environment variables
  serverUrl: ${SONAR_SERVER_URL:}
  login: ${SONAR_LOGIN:}
  password: ${SONAR_PASSWORD:}
  proxyHost: ${SONAR_PROXY_HOST:}
  proxyPort: ${SONAR_PROXY_PORT:}



---
spring:
  config:
    activate:
      on-profile: test

---
spring:
  config:
    activate:
      on-profile: local

server:
  port: 8080

---
spring:
  datasource:
    driver-class-name: org.h2.Driver
    username:
    password:
    url: jdbc:h2:./src/main/resources/data/appuser;AUTO_SERVER=TRUE
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.H2Dialect
